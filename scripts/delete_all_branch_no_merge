#!/usr/bin/env bash
# @author: TJ Thomas
# http://www.SiteDesignUSA.com
# Filename: delete-all-feature-branches.sh
# Created:   3/30/2019
# Modified:   4/2/2019

# ===> Your script goes here

# Variables
WHEREAMINOW=$(pwd)
# Functions
# helper functions
count_lines() { echo "$1" | egrep -c "^$2" ; }
all_lines() { echo "$1" | grep -v "^$" | wc -l ; }
show_git_status() {
        # gitstatus.sh -- produce the current git repo status on STDOUT
        # Functionally equivalent to 'gitstatus.py', but written in bash (not python).
        #
        # Alan K. Stebbens <aks@stebbens.org> [http://github.com/aks]
        if [ -z "${__GIT_PROMPT_DIR}" ]; then
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "${SOURCE}" ]; do
            DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
            SOURCE="$(readlink "${SOURCE}")"
            [[ $SOURCE != /* ]] && SOURCE="${DIR}/${SOURCE}"
          done
          __GIT_PROMPT_DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
        fi

        gitsym=`git symbolic-ref HEAD`

        # if "fatal: Not a git repo .., then exit
        case "$gitsym" in fatal*) exit 0 ;; esac

        # the current branch is the tail end of the symbolic reference
        branch="${gitsym##refs/heads/}"    # get the basename after "refs/heads/"

        gitstatus=`git diff --name-status 2>&1`

        # if the diff is fatal, exit now
        case "$gitstatus" in fatal*) exit 0 ;; esac


        staged_files=`git diff --staged --name-status`

        num_changed=$(( `all_lines "$gitstatus"` - `count_lines "$gitstatus" U` ))
        num_conflicts=`count_lines "$staged_files" U`
        num_staged=$(( `all_lines "$staged_files"` - num_conflicts ))
        num_untracked=`git ls-files --others --exclude-standard $(git rev-parse --show-cdup) | wc -l`
        if [[ "$__GIT_PROMPT_IGNORE_STASH" = "1" ]]; then
          num_stashed=0
        else
          num_stashed=`git stash list | wc -l`
        fi

        clean=0
        if (( num_changed == 0 && num_staged == 0 && num_U == 0 && num_untracked == 0 && num_stashed == 0 )) ; then
          clean=1
        fi

        remote=

        if [[ -z "$branch" ]]; then
          tag=`git describe --exact-match`
          if [[ -n "$tag" ]]; then
            branch="$tag"
          else
            branch="_PREHASH_`git rev-parse --short HEAD`"
          fi
        else
          remote_name=`git config branch.${branch}.remote`

          if [[ -n "$remote_name" ]]; then
            merge_name=`git config branch.${branch}.merge`
          else
            remote_name='origin'
            merge_name="refs/heads/${branch}"
          fi

          if [[ "$remote_name" == '.' ]]; then
            remote_ref="$merge_name"
          else
            remote_ref="refs/remotes/$remote_name/${merge_name##refs/heads/}"
          fi

          # detect if the local branch have a remote tracking branch
          cmd_output=$(git rev-parse --abbrev-ref ${branch}@{upstream} 2>&1 >/dev/null)

          if [ `count_lines "$cmd_output" "fatal: No upstream"` == 1 ] ; then
            has_remote_tracking=0
          else
            has_remote_tracking=1
          fi

          # get the revision list, and count the leading "<" and ">"
          revgit=`git rev-list --left-right ${remote_ref}...HEAD`
          num_revs=`all_lines "$revgit"`
          num_ahead=`count_lines "$revgit" "^>"`
          num_behind=$(( num_revs - num_ahead ))
          if (( num_behind > 0 )) ; then
            remote="${remote}_BEHIND_${num_behind}"
          fi
          if (( num_ahead > 0 )) ; then
            remote="${remote}_AHEAD_${num_ahead}"
          fi
        fi

        if [[ -z "$remote" ]] ; then
          remote='.'
        fi

        if [[ "$has_remote_tracking" == "0" ]] ; then
          remote='_NO_REMOTE_TRACKING_'
        fi
        echo Branch: $branch / $remote
        git status -s
}

tj_check_branch() {
CURRENT=`git branch | grep '\*' | awk '{print $2}'`
DELETEBRANCH=${2}
ROOTDIR=$(git rev-parse --show-toplevel)
#what is the name of this repo?
echo "Your repo is pointed to branch $CURRENT"
echo "You are about to delete branch $DELETEBRANCH."
echo -e '\E[01;31m'"\033[1mIf you are not in the correct branch, please exit, switch and re-run this script...\033[0m"


echo "You are about to delete branch $DELETEBRANCH. This command is going to delete $DELETEBRANCH and will not merge anything."
echo -e '\E[01;31m'"\033[1mIf you have changes you want to merge EXIT NOW...\033[0m"

echo "Do you want to continue to DELETE $DELETEBRANCH?"

read -r -p "Are you sure? [Y/n] " response
case $response in
    [yY][eE][sS]|[yY])




		git checkout ${1}

		echo "Switched to ${1} branch."

# TJDO need to make this a loop to catch all the remotes and delete across all
		#lets check if branch exists on remote

  LGR=(${listgitremotes}) # $listgitremotes is an array and need parenthesis to keep from displaying as one string
  for gitremotes in "${LGR[@]}" # The [@] syntax tells the interpreter that this is an indexed array that we'll be iterating over.
  do
		if git show-ref --quiet refs/remotes/"${gitremotes}"/"${DELETEBRANCH}"
		then
    echo -e "\E[1;33;40mPreparing to delete branch "${DELETEBRANCH}" from "${gitremotes}" remote\E[1;33;0m"
		git push "${gitremotes}" :${DELETEBRANCH}
		echo "${DELETEBRANCH} branch is deleted from "${gitremotes}" remote."

		else
		echo "There is no branch "${DELETEBRANCH}" in "${gitremotes}" remote to delete. Moving on."
		

		fi
  done

		#Leave these here. It's part of case statement
		git branch -D ${DELETEBRANCH}
		echo "Finished deleting local branch ${DELETEBRANCH}"


        ;;
    *)
        exit
        ;;
esac
CURRENT=`git branch | grep '\*' | awk '{print $2}'`
cd "$ROOTDIR"
echo "We are going to look at git status. No big deal."
git status
echo "${3} repo is now pointed to ${CURRENT} branch."
}
# END function



# ======================Start Commands=======================================================================================

if [ -z $1 ]; then
	echo -e "\E[1;33;40mNo feature branch name given.\E[1;33;0m"
	echo "Please enter a name for your feature branch after the file name or alias command."
	echo "e.g. <command> featurename (no spaces or hyphens, all one word.)"

	exit 1
fi
# Make sure not master, develop, integration or testing.
if [ "${1}" == "master" ] || [ "${1}" == "develop" ] || [ "${1}" == "integration" ] || [ "${1}" == "testing" ]
then
    echo -e "\e[41mWARNING! Do not delete ${1}.\e[0m"
    echo -e "\E[1;33;40mYou cannot delete master, develop, integration or testing.\E[1;33;0m"
    exit 0
else
    echo "Preparing to delete ${1} branch."
fi
# List branches and give choice whether to continue.
echo "Changing to /dev_${USER} directory"
cd ~/dev_${USER}
echo "=== MAIN/CONTROL Puppet repo ==="
git branch | grep '*' | awk -F' ' '{ print "Currently on branch", $2 }'
show_git_status
echo " "
echo "We are now in $(pwd)"
echo " "


		#lets check if branch exists anywhere
# TJDO how to check if more than one remote?




  listgitremotes=$(git remote)
  # If git remotes empty
  if [[ -z "${listgitremotes}" ]]
  then
    # List local branch that match
    if [ git show-ref --quiet refs/heads/"${1}" ]
    then
    # We have no remotes so nothing on remote
      echo "There is a branch ${1} on the local control repo but nothing on remotes."
    else
      # No remote and nothing local. Alarm!
      echo -e "\E[1;33;40mThere is no branch ${1} on the control repo!!!!!!\E[1;33;0m"
      echo "Listing all branches local and remote branches that kind of match. (Did you mean feature/${1}?"
      git branch --list -a "*${1}"
      echo " "
      echo -e "\e[41mAre one of these the correct branch? If so, you should exit by choosing N below...\e[0m"
    fi # END no remotes
  else # remotes exist
  # Now check for remote branches that match
  LGR=(${listgitremotes}) # $listgitremotes is an array and need parenthesis to keep from displaying as one string
  for gitremotes in "${LGR[@]}" # The [@] syntax tells the interpreter that this is an indexed array that we'll be iterating over.
  do
		if git show-ref --quiet refs/remotes/"${gitremotes}"/"${1}"
		then
		  echo "There is a branch ${1} on the "${gitremotes}" remote in the control repo." # We have a match
		# Anything locally?
      if git show-ref --quiet refs/heads/"${1}"
      then
        echo "AND there is a branch ${1} on the local control repo."
      else
          echo -e "\E[1;33;40mBut... There is no local ${1} branch on the local control repo.\E[1;33;0m"
      fi
    else
      # No remote match. What to do.
      echo "No branch ${1} on the "${gitremotes}" remote in the control repo."
      # Anything locally?
      if git show-ref --quiet refs/heads/"${1}"
      then
        echo "But... there is a branch ${1} on the local control repo."
      else
          echo -e "\E[1;33;40mThere is no local ${1} branch on the local control repo.\E[1;33;0m"
      fi
    fi
  done
  # Anything locally?
    if git show-ref --quiet refs/heads/"${1}"
    then
      echo "There is a branch ${1} on the local control repo."
    else
        echo -e "\E[1;33;40mThere is no branch ${1} on the local control repo!!!!!!\E[1;33;0m"
        echo "Listing all branches local and remote branches that kind of match. (Did you mean feature/${1}?"
        git branch --list -a "*${1}"
        echo " "
        echo -e "\e[41mAre one of these the correct branch? If so, you should exit by choosing N below...\e[0m"
    fi
  fi


for dir in $(grep '^mod' Puppetfile | grep -v / | awk -F'"' '{ print $2}')
do
  cd modules/$dir > /dev/null
  echo "=== Module $dir: modules/$dir ==="
  show_git_status

  echo " "
  echo "We are now in $(pwd)"
  echo " "

  listgitremotes=$(git remote)
  # If git remotes empty
  if [[ -z "${listgitremotes}" ]]
  then
    # List local branch that match
    if [ git show-ref --quiet refs/heads/"${1}" ]
    then
    # We have no remotes so nothing on remote
      echo "There is a branch ${1} on the local $dir repo but nothing on remotes."
    else
      # No remote and nothing local. Alarm!
      echo -e "\E[1;33;40mThere is no branch ${1} on the $dir repo!!!!!!\E[1;33;0m"
      echo "Listing all branches local and remote branches that kind of match. (Did you mean feature/${1}?"
      git branch --list -a "*${1}"
      echo " "
      echo -e "\e[41mAre one of these the correct branch? If so, you should exit by choosing N below...\e[0m"
    fi # END no remotes
  else # remotes exist
  # Now check for remote branches that match
  LGR=(${listgitremotes}) # $listgitremotes is an array and need parenthesis to keep from displaying as one string
  for gitremotes in "${LGR[@]}" # The [@] syntax tells the interpreter that this is an indexed array that we'll be iterating over.
  do
		if git show-ref --quiet refs/remotes/"${gitremotes}"/"${1}"
		then
		  echo "There is a branch ${1} on the "${gitremotes}" remote in the $dir repo." # We have a match
		# Anything locally?
      if git show-ref --quiet refs/heads/"${1}"
      then
        echo "AND there is a branch ${1} on the local $dir repo."
      else
          echo -e "\E[1;33;40mBut... There is no local ${1} branch on the local $dir repo.\E[1;33;0m"
      fi
    else
      # No remote match. What to do.
      echo "No branch ${1} on the "${gitremotes}" remote in the $dir repo."
      # Anything locally?
      if git show-ref --quiet refs/heads/"${1}"
      then
        echo "But... there is a branch ${1} on the local $dir repo."
      else
          echo -e "\E[1;33;40mThere is no local ${1} branch on the local $dir repo.\E[1;33;0m"
      fi
    fi
  done
    # Anything locally?
      if git show-ref --quiet refs/heads/"${1}"
      then
        echo "There is a branch ${1} on the $dir repo."
      else
          echo -e "\E[1;33;40mThere is no branch ${1} on the local $dir repo!!!!!!\E[1;33;0m"
          echo "Listing all branches local and remote branches that kind of match. (Did you mean feature/${1}?"
          git branch --list -a "*${1}"
          echo " "
          echo -e "\e[41mAre one of these the correct branch? If so, you should exit by choosing N below...\e[0m"
      fi
    fi
  cd ~/dev_${USER}
  echo " "
done # Each repo in module dir
echo "Changing to $WHEREAMINOW"
cd $WHEREAMINOW


 #reset quit - so we enter the inner loop first time
 quit=""
 #we want to repeat until quit is Y or N:
 #while quit is not "Y" and quit is not "N"
   while [ "$quit" != "Y" -a "$quit" != "N" ]
   do
     echo -e "\E[1;33;40mAre the repos clean? Do you want to continue?\E[1;33;0m"
     echo "Y means the repos are clean and you want to continue, N means exit script and correct issues. Continue? Y/N?"
     read quit

 #Convert lower case y/n to Y/N
     quit=`echo $quit | tr yn YN`
   done
# Do we continue?
if [[ "${quit}" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
echo "Ok, we are continuing script."
else
echo "Quitting script now. Please make corrections and re-run script."
exit 0
fi

# END List branches and give choice whether to continue.


############################################################################## START DELETE BRANCH ###################################

# Do we want to delete remotes
#Initialize quit so we enter the outer loop first time
quit="N"
# Loop while quit is N
while [ "$quit" = "N" ]
 do
DELETE=""
 while [[ -z "${DELETE}" ]]
  do
    while [ "${DELETE}" != "Y" -a "${DELETE}" != "N" ]
    do
echo -e "\E[1;33;40mDo you want to delete branch ${1} on the remote as well?\E[1;33;0m"
echo "Y means YES, please delete feature branch ${1} on the remote too, N means don't delete remote- just local branch ${1}. Continue? (y/n)?"
  read -ep "Delete Remote or not? (Must be y or n to continue): " DELETE
  echo ""
  DELETE=`echo ${DELETE} | tr yn YN`
    done
  done
   echo "Confirm that you want to continue."
   echo "Delete Remote or not?	(Must be Y or N)				${DELETE}"
   echo "=========================================================================="
 #reset quit - so we enter the inner loop first time
 quit=""
 #we want to repeat until quit is Y or N:
 #while quit is not "Y" and quit is not "N"
   while [ "$quit" != "Y" -a "$quit" != "N" ]
   do
     echo "Y means your answer, ${DELETE}, is correct. N means try again. Continue? Y/N?"
     read quit

 #Convert lower case y/n to Y/N
     quit=`echo $quit | tr yn YN`
   done
done




# Do we delete remote?
if [[ "${DELETE}" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
echo "Ok, we are deleting remote branches ${1} as well as locally."
else
echo "We won't delete remote branches for ${1}."
fi

echo "Changing to /dev_${USER} directory"
cd ~/dev_${USER}
echo "=== MAIN/CONTROL Puppet repo ==="
git branch | grep '*' | awk -F' ' '{ print "Currently on branch", $2 }'
show_git_status
echo " "
echo "We are now in $(pwd)"
echo " "

# Do we delete remote?
if [[ "${DELETE}" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
echo "Ok, we are deleting remote branch ${1}."
tj_check_branch integration ${1} control
else
echo "We are not deleting remote branch ${1}."
# Delete local branch
echo "Checking out integration branch."
git checkout integration
echo "Deleting local branch ${1}"
git branch -D ${1}
echo "Finished deleting local branch ${1}"
CURRENT=`git branch | grep '\*' | awk '{print $2}'`
ROOTDIR=$(git rev-parse --show-toplevel)
cd "$ROOTDIR"
echo "We are going to look at git status. No big deal."
git status
echo "${2} repo is now pointed to ${CURRENT} branch."
fi
echo " "
echo " "



for dir in $(grep '^mod' Puppetfile | grep -v / | awk -F'"' '{ print $2}')
do
        cd modules/$dir > /dev/null
        echo "=== Module $dir: modules/$dir ==="
        show_git_status

        echo " "
echo "We are now in $(pwd)"
echo " "


        # Do we delete remote?
        if [[ "${DELETE}" =~ ^([yY][eE][sS]|[yY])+$ ]]
          then
            echo "Ok, we are deleting remote branch ${1} from $dir repo."
            tj_check_branch develop ${1} $dir
            echo " "
            echo " "
        else
            echo "We are not deleting remote branch ${1} from $dir repo."
            # Delete local branch
            echo "Checking out develop branch."
            git checkout develop
            echo "Deleting local branch ${1} from $dir repo."
            git branch -D ${1}
            echo "Finished deleting local branch ${1} from $dir repo."
            CURRENT=`git branch | grep '\*' | awk '{print $2}'`
            ROOTDIR=$(git rev-parse --show-toplevel)
            cd "$ROOTDIR"
            echo "We are going to look at git status. No big deal."
            git status
            echo "${2} repo is now pointed to ${CURRENT} branch."
            echo " "
            echo " "
        fi
        # back to dev folder of user.
        echo "Changing to /dev_${USER} directory"
        cd ~/dev_${USER} > /dev/null
        echo " "
done
echo "Changing to $WHEREAMINOW"
cd $WHEREAMINOW






# <=== Your script goes here
# All Done





